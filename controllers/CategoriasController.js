// =============================================
// controllers/CategoriasController.js - C√ìDIGO CORREGIDO
// =============================================
const db = require('../config/database'); // ‚úÖ Usar pool centralizado como MercaderiasController
const logger = require('../config/logger');

class CategoriasController {
    // Listar todas las categor√≠as
    async index(req, res) {
        try {
            console.log('üìã Obteniendo categor√≠as...');
            
            const categorias = await db.query(`
                SELECT 
                    id,
                    categoria,
                    activo,
                    fecha_creacion,
                    ultima_modificacion
                FROM categorias 
                WHERE activo = 1 
                ORDER BY categoria ASC
            `);

            res.json({
                success: true,
                data: categorias,
                total: categorias.length
            });
        } catch (error) {
            console.error('‚ùå Error en index categor√≠as:', error);
            if (logger) {
                logger.error('Error en index categor√≠as:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al obtener categor√≠as',
                error: error.message
            });
        }
    }

    // Obtener categor√≠a por ID
    async show(req, res) {
        try {
            const { id } = req.params;
            console.log(`üîç Buscando categor√≠a ID: ${id}`);
            
            const categorias = await db.query(`
                SELECT 
                    id,
                    categoria,
                    activo,
                    fecha_creacion,
                    ultima_modificacion
                FROM categorias 
                WHERE id = ?
            `, [id]);

            if (categorias.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Categor√≠a no encontrada'
                });
            }

            res.json({
                success: true,
                data: categorias[0]
            });
        } catch (error) {
            console.error('‚ùå Error en show categor√≠a:', error);
            if (logger) {
                logger.error('Error en show categor√≠a:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al obtener categor√≠a',
                error: error.message
            });
        }
    }

    // Crear nueva categor√≠a
    async create(req, res) {
        try {
            const { categoria } = req.body;
            console.log('üìù Creando categor√≠a:', categoria);

            // Validaci√≥n b√°sica
            if (!categoria || categoria.trim() === '') {
                return res.status(400).json({
                    success: false,
                    message: 'La descripci√≥n es requerida'
                });
            }

            // Verificar si ya existe
            const existing = await db.query(`
                SELECT id FROM categorias 
                WHERE categoria = ? AND activo = 1
            `, [categoria.trim()]);

            if (existing.length > 0) {
                return res.status(400).json({
                    success: false,
                    message: 'Ya existe una categor√≠a con esa descripci√≥n'
                });
            }

            // Crear categor√≠a
            const result = await db.query(`
                INSERT INTO categorias (categoria, activo, fecha_creacion, ultima_modificacion) 
                VALUES (?, 1, NOW(), NOW())
            `, [categoria.trim()]);

            // Obtener la categor√≠a creada
            const nuevaCategoria = await db.query(`
                SELECT 
                    id,
                    categoria,
                    activo,
                    fecha_creacion,
                    ultima_modificacion
                FROM categorias 
                WHERE id = ?
            `, [result.insertId]);

            res.status(201).json({
                success: true,
                message: 'Categor√≠a creada exitosamente',
                data: nuevaCategoria[0]
            });
        } catch (error) {
            console.error('‚ùå Error en create categor√≠a:', error);
            if (logger) {
                logger.error('Error en create categor√≠a:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al crear categor√≠a',
                error: error.message
            });
        }
    }

    // Actualizar categor√≠a
    async update(req, res) {
        try {
            const { id } = req.params;
            const { categoria, activo } = req.body;
            console.log(`‚úèÔ∏è  Actualizando categor√≠a ID: ${id}`);

            // Verificar que existe
            const existing = await db.query(`
                SELECT id FROM categorias WHERE id = ?
            `, [id]);

            if (existing.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Categor√≠a no encontrada'
                });
            }

            // Preparar campos a actualizar
            let campos = [];
            let valores = [];

            if (categoria && categoria.trim() !== '') {
                // Verificar duplicado
                const duplicate = await db.query(`
                    SELECT id FROM categorias 
                    WHERE categoria = ? AND id != ? AND activo = 1
                `, [categoria.trim(), id]);

                if (duplicate.length > 0) {
                    return res.status(400).json({
                        success: false,
                        message: 'Ya existe otra categor√≠a con esa descripci√≥n'
                    });
                }

                campos.push('categoria = ?');
                valores.push(categoria.trim());
            }

            if (activo !== undefined) {
                campos.push('activo = ?');
                valores.push(activo ? 1 : 0);
            }

            if (campos.length === 0) {
                return res.status(400).json({
                    success: false,
                    message: 'No hay campos para actualizar'
                });
            }

            // Agregar timestamp y ID
            campos.push('ultima_modificacion = NOW()');
            valores.push(id);

            // Ejecutar actualizaci√≥n
            const updateQuery = `
                UPDATE categorias 
                SET ${campos.join(', ')} 
                WHERE id = ?
            `;

            await db.query(updateQuery, valores);

            // Obtener categor√≠a actualizada
            const categoriaActualizada = await db.query(`
                SELECT 
                    id,
                    categoria,
                    activo,
                    fecha_creacion,
                    ultima_modificacion
                FROM categorias 
                WHERE id = ?
            `, [id]);

            res.json({
                success: true,
                message: 'Categor√≠a actualizada exitosamente',
                data: categoriaActualizada[0]
            });
        } catch (error) {
            console.error('‚ùå Error en update categor√≠a:', error);
            if (logger) {
                logger.error('Error en update categor√≠a:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al actualizar categor√≠a',
                error: error.message
            });
        }
    }

    // Eliminar categor√≠a (soft delete)
    async destroy(req, res) {
        try {
            const { id } = req.params;
            console.log(`üóëÔ∏è  Eliminando categor√≠a ID: ${id}`);

            // Verificar que existe
            const existing = await db.query(`
                SELECT id FROM categorias WHERE id = ?
            `, [id]);

            if (existing.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Categor√≠a no encontrada'
                });
            }

            // Verificar si hay mercader√≠as asociadas
            const mercaderias = await db.query(`
                SELECT COUNT(*) as count 
                FROM mercaderias 
                WHERE id_categoria = ? AND activo = 1
            `, [id]);

            if (mercaderias[0].count > 0) {
                return res.status(400).json({
                    success: false,
                    message: `No se puede eliminar. Hay ${mercaderias[0].count} mercader√≠as asociadas a esta categor√≠a`
                });
            }

            // Soft delete
            await db.query(`
                UPDATE categorias 
                SET activo = 0, ultima_modificacion = NOW() 
                WHERE id = ?
            `, [id]);

            res.json({
                success: true,
                message: 'Categor√≠a eliminada exitosamente'
            });
        } catch (error) {
            console.error('‚ùå Error en destroy categor√≠a:', error);
            if (logger) {
                logger.error('Error en destroy categor√≠a:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al eliminar categor√≠a',
                error: error.message
            });
        }
    }

    // M√©todo adicional: obtener categor√≠as con estad√≠sticas
    async getWithStats(req, res) {
        try {
            console.log('üìä Obteniendo categor√≠as con estad√≠sticas...');
            
            const categorias = await db.query(`
                SELECT 
                    c.id,
                    c.categoria,
                    c.activo,
                    c.fecha_creacion,
                    c.ultima_modificacion,
                    COUNT(m.id) as total_mercaderias,
                    COUNT(CASE WHEN m.activo = 1 THEN 1 END) as mercaderias_activas
                FROM categorias c
                LEFT JOIN mercaderias m ON c.id = m.id_categoria
                WHERE c.activo = 1
                GROUP BY c.id, c.categoria, c.activo, c.fecha_creacion, c.ultima_modificacion
                ORDER BY c.categoria ASC
            `);

            res.json({
                success: true,
                data: categorias,
                total: categorias.length
            });
        } catch (error) {
            console.error('‚ùå Error en getWithStats categor√≠as:', error);
            if (logger) {
                logger.error('Error en getWithStats categor√≠as:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al obtener estad√≠sticas de categor√≠as',
                error: error.message
            });
        }
    }

    // M√©todo adicional: buscar categor√≠as
    async search(req, res) {
        try {
            const { q } = req.query;
            
            if (!q || q.trim() === '') {
                return this.index(req, res);
            }

            console.log('üîç Buscando categor√≠as:', q);
            
            const categorias = await db.query(`
                SELECT 
                    id,
                    categoria,
                    activo,
                    fecha_creacion,
                    ultima_modificacion
                FROM categorias 
                WHERE activo = 1 
                AND categoria LIKE ?
                ORDER BY categoria ASC
            `, [`%${q.trim()}%`]);

            res.json({
                success: true,
                data: categorias,
                total: categorias.length,
                query: q.trim()
            });
        } catch (error) {
            console.error('‚ùå Error en search categor√≠as:', error);
            if (logger) {
                logger.error('Error en search categor√≠as:', error);
            }
            res.status(500).json({
                success: false,
                message: 'Error al buscar categor√≠as',
                error: error.message
            });
        }
    }
}

// Exportar una instancia √∫nica del controlador
module.exports = new CategoriasController();